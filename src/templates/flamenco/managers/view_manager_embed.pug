.flamenco-box.manager
	form#item_form(onsubmit="return editManager()")
		| {% if can_edit %}
		.input-group
			input.item-name.input-transparent(
				name="name",
				type="text",
				placeholder="Manager's name",
				value="{{ manager.name | hide_none }}")
			button.copy-to-clipboard.btn.item-id(
				style="margin-left: auto",
				name="Copy to Clipboard",
				type="button",
				data-clipboard-text="{{ manager._id }}",
				title="Copy ID to clipboard")
				| ID
		.input-group
			textarea.item-description.input-transparent(
				name="description",
				type="text",
				rows=1,
				placeholder="Manager's description") {{ manager.description | hide_none }}

		.input-group
			button#item-save.btn.btn-outline-success.btn-block(type='submit')
				i.pi-check
				| Save Manager
		| {% else %}
		p.item-name {{ manager.name | hide_none }}
		| {% if manager.description %}
		p.item-description {{ manager.description | hide_none }}
		| {% endif %}
		| {% endif %}

	h4 Properties
	.table.item-properties
		.table-body
			.table-row.properties-last-updated
				.table-cell Last Updated
				.table-cell(title='Unable to edit, set by Manager')
					| {{ manager._updated | hide_none | pretty_date_time }}
			.table-row.properties-url
				.table-cell URL
				.table-cell(title='Unable to edit, set by Manager')
					| {% if manager.url %}
					a(href="{{ manager.url }}") {{ manager.url }}
					| {% else %}
					| None yet, will be set by the Manager
					| {% endif %}
			.table-row.properties-last-updated
				.table-cell Task Types
				.table-cell(title="Task types supported by this Manager's Workers")
					| {% if manager.worker_task_types %}
					| {{ manager.worker_task_types | sort | join(', ') }}
					| {% else %}
					| never sent by Manager
					| {% endif %}

	| {% if manager.variables %}
	h4 Variables
	| {% for var_key, var_values in manager.variables.to_dict().items()  %}
	.table.item-properties
		.table-body(title='Unable to edit, set by Manager')
			| {% for v in var_values %}
			.table-row.properties-variables
				.table-cell.variable-name {% if loop.first %}{{ var_key }}{% endif %}
				.table-cell.variable-key {{ v }}
				.table-cell.variable-value {{ var_values[v] }}
			| {% endfor %}
	| {% endfor %}
	| {% endif %}

	| {% if manager.path_replacement %}
	h4 Path Replacement Variables
	| {% for pathrep_key, pathrep_values in manager.path_replacement.to_dict().items()  %}
	.table.item-properties
		.table-body(title='Unable to edit, set by Manager')
			| {% for v in pathrep_values %}
			.table-row.properties-path-replacement
				.table-cell.variable-name {% if loop.first %}{{ pathrep_key }}{% endif %}
				.table-cell.variable-key {{ v }}
				.table-cell.variable-value {{ pathrep_values[v] }}
			| {% endfor %}
	| {% endfor %}
	| {% endif %}

.flamenco-box.manager
	h4 Projects linked to this Manager

	| {% if linked_projects._items %}
	.table.item-properties
		.table-body
			| {% for project in linked_projects._items %}
			.table-row.properties-url
				.table-cell
					i.pi-blender-cloud
				.table-cell
					a(href="{{ url_for('flamenco.jobs.perproject.index', project_url=project.url) }}")
						| {{ project.name }}
				.table-cell
					a(href='javascript:clickUnlinkProject("{{ project._id }}")', title="Unlink project")
						i.pi-trash
			| {% endfor %}
	| {% else %}
	.projects-list-empty No projects linked yet.
	| {% endif %}

	| {% if can_edit %}
	#item-action-panel
		| {% if available_projects %}
		select#link_project_select
			| {% for project in available_projects %}
			option(value="{{ project._id }}") {{ project.name }}
			| {% endfor %}
		button.btn.btn-success(onclick="clickLinkProject()")
			i.pi-link
			| Link project
		| {% elif linked_projects %}
		button.btn.btn-secondary(disabled)
			| All available projects are linked already.
		| {% else %}
		button.btn.btn-secondary(disabled)
			| You have no projects set up for Flamenco.
		| {% endif %}
	| {% endif %}


// OWNERSHIP
| {% if can_edit %}
.flamenco-box.manager
	h4 Owners of this Manager

	#ownership
		.row
			.col-md-6
				.sharing-users-search
					.form-group
						input#user-select.form-control(
							name='contacts',
							type='text',
							placeholder='Add owner by name')

				ul.sharing-users-list
					| {% for owner in owners %}
					li.sharing-users-item(
						data-user-id="{{ owner['_id'] }}",
						class="{% if current_user.objectid == owner['_id'] %}self{% endif %}")
						.sharing-users-avatar
							img(src="{{ owner['avatar'] }}")
						.sharing-users-details
							span.sharing-users-name
								| {{ owner['full_name'] }}
								| {% if current_user.objectid == owner['_id'] %}
								small (You)
								| {% else %}
								small (Co-owner)
								| {% endif %}
							span.sharing-users-extra {{ owner['username'] }}
						.sharing-users-action
							| {# Only allow deletion if we are: admin, project owners, or current_user in the team #}
							| {% if can_abandon_manager %}
							| {%     if current_user.objectid == owner['_id'] %}
							button.user-remove(title="Abandon ownership of this Manager")
								i.pi-trash
							| {%     else %}
							button.user-remove(title="Revoke ownership from this user")
								i.pi-trash
							| {%     endif %}
							| {% endif %}

					| {% endfor %}

			.col-md-6
				.sharing-users-info
					h4 What can owners do?
					p.
						Owners of a Manager can (un)link projects, appoint or remove other owners,
						and generally can use the Manager. Note that all owners are equal; there are
						no special rights or abilities for the person who created this Manager.
					p A Manager cannot be without owner.

| {% endif %}

.action-result-panel

| {% if can_edit %}
.flamenco-box.manager
	h4 Authentication Token

	.row
		.col-md-8
			p
				i.pi-lock
				| Due to a security upgrade it is no longer possible to view the Manager's
				| authentication token here. Instead, use the
				=" "
				a(href='https://www.flamenco.io/docs/user_manual/installation/#linking-the-manager-to-a-server', target='_blank') Flamenco Manager Web Setup
				=" "
				| to re-link your Manager. This automatically generates a new authentication token.
		.col-md-4
			button.btn.btn-block#revoke-auth-token(
				title="Revoke any existing authentication token",
				name="Revoke Token",
				onclick="revokeAuthToken()")
				// When changing the button text, also update revokeAuthToken().
				| Revoke existing token

| {% endif %}

#item-view-feed
	| {% if config.DEBUG %}
	.debug-info
		a.debug-info-toggle(role='button',
			data-toggle='collapse',
			href='#debug-content-manager',
			aria-expanded='false',
			aria-controls='debug-content-manager')
			i.pi-info
			| Debug Info
		#debug-content-manager.collapse
			pre.
				{{ manager.to_dict() | pprint }}
	| {% endif %}

| {% block footer_scripts %}

| {% if can_edit %}
script.
	$(document).ready(function() {
		$('#user-select').userSearch(function(event, hit, dataset) {
			var $existing = $('li.sharing-users-item[data-user-id="' + hit.objectID + '"]');
			if ($existing.length) {
				$existing
					.addClass('active')
					.delay(1000)
					.queue(function() {
						console.log('no');
						$existing.removeClass('active');
						$existing.dequeue();
					});
				toastr.info('User is already co-owner of this Manager');
			}
			else {
				addUser('{{ manager["_id"] }}', hit.objectID);
			}
		});


		function addUser(managerId, userId){

			if (!userId || userId.length == 0) {
				toastr.error('Please select a user from the list');
				return;
			}

			patchManager(managerId, {
				op: 'change-ownership',
				action: 'share',
				manager_id: managerId,
				user: userId
			})
			.done(function (data) {
				setTimeout(function(){ $('.sharing-users-item').removeClass('added');}, 350);
				statusBarSet('success', 'User added to this project!', 'pi-grin');

				// TODO fsiddi: avoid the reloading of the entire page?
				window.location.reload();
			})
			.fail(function (err) {
				var $p = xhrErrorResponseElement(err, 'Could not share with user: ');
				toastr.error($p);
			});
		};

	});

| {% endif %}
script.
	$(document).ready(function() {
		$('body').on('click', '.user-remove', function(e) {
			var user_id = $(this).closest('*[data-user-id]').data('user-id');
			removeUser(user_id);
		});

		function removeUser(user_id) {
			if (typeof user_id == 'undefined') {
				throw "removeUser(undefined) called";
			}
			var manager_id = '{{ manager._id }}';
			patchManager(manager_id, {
				op: 'change-ownership',
				action: 'unshare',
				manager_id: manager_id,
				user: user_id
			}).done(function() {
				$("ul.sharing-users-list").find("[data-user-id='" + user_id + "']").remove();
				toastr.success('User removed from this project');

			}).fail(function (data) {
				var $p = xhrErrorResponseElement(data, 'Error removing user: ');
				toastr.error($p);
			});
		}
	});


script.
	var clipboard = null;
	function createClipboard() {
		if (clipboard != null) {
			clipboard.destroy();
		}

		clipboard = new Clipboard('.copy-to-clipboard');

		clipboard.on('success', function(e) {
			$(e.trigger).flashOnce();
			toastr.success('Copied to clipboard');
		});
	}
	createClipboard();

	function clickUnlinkProject(project_id) {
		var manager_id = '{{ manager._id }}';
		unlinkProject(manager_id, project_id)
		.done(function() {
			item_open(manager_id, 'manager', false);
		});
	}

	function clickLinkProject() {
		var manager_id = '{{ manager._id }}';
		var project_id = $('#link_project_select').val();
		linkProject(manager_id, project_id)
		.done(function() {
			item_open(manager_id, 'manager', false);
		});
	}

	function editManager() {
		var $form = $('#item_form');
		var new_name = $form.find('*[name="name"]').val();

		patchManager('{{ manager._id }}', {
			op: 'edit-from-web',
			name: new_name,
			description: $form.find('*[name="description"]').val(),
		})
		.done(function() {
			$('span.manager-name-{{ manager._id }}').text(new_name);
		})
		.fail(function(err) {
			var $p = xhrErrorResponseElement(err, 'Error editing Manager: ');
			toastr.error($p);
		})
		;

		return false;
	}

	var $show_auth_token = $('#show_auth_token');
	function _displayAuthToken(json_data) {
		function _hideAuthToken() {
			$show_auth_token
				.text('click to show authentication token')
				.removeClass('copy-to-clipboard')
				.removeAttr('title')
				.removeAttr('data-clipboard-text')
				.click(showAuthToken)
			;
			$('#click_token_text').remove();
		}

		$('#click_token_text').remove();

		$('<a>')
			.text(json_data.token)
			.addClass('copy-to-clipboard')
			.attr('href', 'javascript:void(0);')
			.attr('title', 'Click to copy to clipboard')
			.attr('data-clipboard-text', json_data.token)
			.off('click')
			.insertAfter($show_auth_token)
		;
		$('<p>')
			.attr('id', 'click_token_text')
			.text(
				'Click the token to copy to your clipboard, ' +
				'then paste it into the manager_secret setting in your flamenco-manager.yml file.')
			.addClass('hint')
			.insertAfter($show_auth_token)
		;
		createClipboard();
		window.setTimeout(_hideAuthToken, 60000);
	}

	function revokeAuthToken() {
		var $btn = $('#revoke-auth-token');

		function restoreButtonText() {
			window.setTimeout(function() {
				$btn.text('Revoke existing token');
			}, 3000);
		}

		if (!confirm('Are you sure you want to revoke any existing authentication token? ' +
				'This will stop your Manager from working until you re-link it.')) {
			$btn.text('Cancelled');
			restoreButtonText();
			return;
		}

		$btn.attr('disabled', 'disabled').text('Revoking...');

		$.post(
			'{{ url_for("flamenco.managers.revoke_auth_token", manager_id=manager._id) }}',
			{csrf: '{{ csrf }}'}
		)
		.done(function(data) {
			$btn.removeAttr('disabled').text('Authentication token revoked');
			_displayAuthToken(data);
			restoreButtonText();
			toastr.success('Authentication token revoked');
		})
		.fail(function(err) {
			var $p = xhrErrorResponseElement(err, 'Error revoking auth token: ');
			toastr.error($p);
			restoreButtonText();
		})
		;
	}


| {% endblock %}
